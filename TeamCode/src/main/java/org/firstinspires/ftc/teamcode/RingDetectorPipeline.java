package org.firstinspires.ftc.teamcode;

import com.acmerobotics.dashboard.config.Config;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;
import org.openftc.easyopencv.OpenCvPipeline;

/**
* GripPipeline class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
@Config
public class RingDetectorPipeline extends OpenCvPipeline {

	//Outputs
	private Mat hsvThresholdOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContours0Output = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContours1Output = new ArrayList<MatOfPoint>();
	private ArrayList<Rect> rings = new ArrayList<>();
	private ArrayList<String> labels = new ArrayList<>();
	public static double LowerHue = 97;
	public static double UpperHue = 109;
	public static double minArea = 3000;
	private double ratioThreshold = 1.5;

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public Mat processFrame(Mat source0) {
		// Step HSV_Threshold0:
		Mat hsvThresholdInput = source0;
		double[] hsvThresholdHue = {LowerHue, UpperHue};
		double[] hsvThresholdSaturation = {64.20863309352518, 255.0};
		double[] hsvThresholdValue = {0.0, 255.0};
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step Find_Contours0:
		Mat findContoursInput = hsvThresholdOutput;
		boolean findContoursExternalOnly = true;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContours0Contours = findContoursOutput;
		double filterContours0MinArea = minArea;
		double filterContours0MinPerimeter = 0;
		double filterContours0MinWidth = 0;
		double filterContours0MaxWidth = 1000;
		double filterContours0MinHeight = 0;
		double filterContours0MaxHeight = 1000;
		double[] filterContours0Solidity = {0, 100};
		double filterContours0MaxVertices = 1000000;
		double filterContours0MinVertices = 0;
		double filterContours0MinRatio = ratioThreshold;
		double filterContours0MaxRatio = 10000.0;
		filterContours(filterContours0Contours, filterContours0MinArea, filterContours0MinPerimeter, filterContours0MinWidth, filterContours0MaxWidth, filterContours0MinHeight, filterContours0MaxHeight, filterContours0Solidity, filterContours0MaxVertices, filterContours0MinVertices, filterContours0MinRatio, filterContours0MaxRatio, filterContours0Output);

		// Step Filter_Contours1:
		ArrayList<MatOfPoint> filterContours1Contours = findContoursOutput;
		double filterContours1MinArea = minArea;
		double filterContours1MinPerimeter = 0;
		double filterContours1MinWidth = 0;
		double filterContours1MaxWidth = 1000;
		double filterContours1MinHeight = 0;
		double filterContours1MaxHeight = 1000;
		double[] filterContours1Solidity = {0, 100};
		double filterContours1MaxVertices = 1000000;
		double filterContours1MinVertices = 0;
		double filterContours1MinRatio = 0.0;
		double filterContours1MaxRatio = ratioThreshold;
		filterContours(filterContours1Contours, filterContours1MinArea, filterContours1MinPerimeter, filterContours1MinWidth, filterContours1MaxWidth, filterContours1MinHeight, filterContours1MaxHeight, filterContours1Solidity, filterContours1MaxVertices, filterContours1MinVertices, filterContours1MinRatio, filterContours1MaxRatio, filterContours1Output);

		rings.clear();
		labels.clear();

		if(!filterContours0Output.isEmpty()) {
			for (MatOfPoint contour : filterContours0Output) {
				rings.add(Imgproc.boundingRect(contour));
				labels.add("Single");
			}
		}
		if(!filterContours1Output.isEmpty()) {
			for (MatOfPoint contour : filterContours1Output) {
				rings.add(Imgproc.boundingRect(contour));
				labels.add("Multiple");
			}
		}
		if(!findContoursOutput.isEmpty()) {
			Imgproc.drawContours(source0, findContoursOutput, -1, new Scalar(0, 255, 0));
		}

		if (!rings.isEmpty()) {
			for (int i = 0; i < rings.size(); i++) {
				if (rings.get(i) != null) {
					Imgproc.rectangle(source0, rings.get(i), new Scalar(0, 255, 0));
					Imgproc.putText(source0, labels.get(i), rings.get(i).tl(), Imgproc.FONT_HERSHEY_PLAIN, 1.0, new Scalar(0, 0, 0));
				}
			}
		}

		return source0;
	}

	public ArrayList<Rect> getRings(){
		return rings;
	}

	public ArrayList<String> getLabels(){
		return labels;
	}

	public int getStarterStack() {
		if(!labels.isEmpty()) {
			if (labels.contains("Multiple")) {
				return 4;
			} else {
				return 1;
			}
		}
		else {
			return 0;
		}
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContours0Output() {
		return filterContours0Output;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContours1Output() {
		return filterContours1Output;
	}


	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param val The min and max value
	 * @param out The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
	    Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
			new Scalar(hue[1], sat[1], val[1]), out);
	}


	private void findContours(Mat input, boolean externalOnly,
		List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		}
		else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}


	/**
	 * Filters out contours that do not meet certain criteria.
	 * @param inputContours is the input list of contours
	 * @param output is the the output list of contours
	 * @param minArea is the minimum area of a contour that will be kept
	 * @param minPerimeter is the minimum perimeter of a contour that will be kept
	 * @param minWidth minimum width of a contour
	 * @param maxWidth maximum width
	 * @param minHeight minimum height
	 * @param maxHeight maximimum height
	 * @param solidity the minimum and maximum solidity of a contour
	 * @param minVertexCount minimum vertex Count of the contours
	 * @param maxVertexCount maximum vertex Count
	 * @param minRatio minimum ratio of width to height
	 * @param maxRatio maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea,
		double minPerimeter, double minWidth, double maxWidth, double minHeight, double
		maxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double
		minRatio, double maxRatio, List<MatOfPoint> output) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		//operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth) continue;
			if (bb.height < minHeight || bb.height > maxHeight) continue;
			final double area = Imgproc.contourArea(contour);
			if (area < minArea) continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) continue;
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int)hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1]};
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1]) continue;
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)	continue;
			final double ratio = bb.width / (double)bb.height;
			if (ratio < minRatio || ratio > maxRatio) continue;
			output.add(contour);
		}
	}




}

